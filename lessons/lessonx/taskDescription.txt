В этом задании необходимо будет вспомнить и спользовать всё что вы изучили до этого.



0. этап - подготовительный
основное задание:
- в корневой папке задания создать файл catalog.php и productform.php
- в корневой папке задания создать папку model
- в папку model поместить классы из 7го задания, каждый класс, обстрактный класс, интерфейс, отдельным файлом. Имя файла = название файла
- в папку model добавить файл ProductCollection.php
- в корневой папке задания создать папку controller. В этой папке создать файл productController.php


для усложнённого задания:
- в корневой папке задания создать файл cart.php
- в папке controller создать файл cartController.php


1. этап - добавляем продукты в базу данных. На этом этапе используем знания полученные на практике №2
- в файле ProductCollection.php создать класс productCollection
цель этого класса, сделать так чтобы объекты продуктов созданные нами, хранились не в массиве, а в базе данных.
После его реализации, можно будет добавлять сотни продуктов, как в настоящем интернет магазине, при этом не захламляя код.

- создадим базу данных, назовём например mystore

для основного задания создадим таблицу `products`, со следующими полями
  `product_id` int(20) NOT NULL AUTO_INCREMENT,  //AUTO_INCREMENT поле
  `category` varchar(100) CHARACTER SET utf8,    //категория продукта - монитор или наушник
  `name` varchar(100) CHARACTER SET utf8,        //имя продукта
  `article` varchar(100) CHARACTER SET utf8,     //артикл продукта - должно быть уникальным значением
  `price` float(20),                             //цена продукта
  `weight` varchar(100) CHARACTER SET utf8,      //вес продукта
  `attribute1` varchar(100) CHARACTER SET utf8,  //диагональ для монитора и максимальный звук для наушников
  `attribute2` varchar(100) CHARACTER SET utf8,  //тип матрицы для монитора и наличие безпроводного интерфейса для наушника

для усложнённого задания дополнительно создадим таблицу `cart`
  `cartitem_id` int(20) NOT NULL AUTO_INCREMENT,
  `product_sku` varchar(100) CHARACTER SET utf8,
  `count` varchar(100) CHARACTER SET utf8,
   PRIMARY KEY (`cartitem_id`)


Вернёмся к нашему классу.
-  В конструкторе принимаем данные для подключения к базе данных
__construct(string $dbtable = 'portfolio', string $dbhost = 'localhost', string $dbuser = 'root', string $dbpass = 'root')
можно использовать в работе как PDO библиотеку так и Mysqli
создаём соединение с базой данной и сохраняем его в свойстве класса для дальнейшего использования
$this->db = new PDO("mysql:host={$dbhost};dbname={$dbtable};charset=utf8", $dbuser, $dbpass);

- В классе должно быть свойство $productCollection, которое является массивом хранящим все добавленные в базу продуктовые объекты. Массив заполняем в конструкторе и дополняем при добавлении нового продукта

- В классе реализовать публичный метод
publick function addProduct(string $category, string $name, string $article, float $price, float $weight, string $attribute1, string $attribute2)
в зависимоти от категории создаём объект Monitor или Headphones, например

if ($category == 'Monitor') {
    $this->productCollection[] = new Monitor($category, $name, $article, $price, $weight, $attribute1, $attribute2);
} elseif ($category == 'Headphones') {
    $this->productCollection[] = new Headphones($category, $name, $article, $price, $weight, $attribute1, $attribute2);
} else {
    die('Category is not exist');
}
Так же в этом методе добавляем продукт в базу данных (одна строка в базе - один продукт)



- В классе productCollection реализовать метод getProductCollection(),
в методе получаем из базы массив содерщищай все продукты из таблицы products, в цикле foreach проходим по массиву и создаём объекты монитора или наушника на основе данных массива

- В классе productCollection реализовать метод getProductById($productId),
в методе получаем из базы

- В классе productCollection реализовать метод deleteProductById($productId),
который принимает идентификатор продукта и удаляет продукт из базы данных по его id

2. этап - категория продуктов. На этом этапе используем знания полученные на Практике №1 и свой креатив и умения в вёрстке
На этом этапе создадим HTML интерфейс для отображения наших продуктов. Это будет страница категории
- В файле catalog.php создать вёрстку для отображения всех продуктов плиткой, по 3 продкта на строку


3. этап - форма добавления продуктов

4. этап - усложнённое - форма корзины продуктов

5. этап - усложнённое - добавление удаление продуктов из корзины

6. этап - дополнительное - добавляем работу с пользователями, необходимо изучить работу с куками и сессией


category . name | weight | count | price | del